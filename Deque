#include <bits/stdc++.h> 
class Deque
{
public:
    // Initialize your data structure
    int size;
    int front,rear;
    int q[];
    Deque(int n)
    {
        // Write your code here.
        size=n;
        q[n];
        front=-1;
        rear=-1;
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        // Write your code here.
        if(isFull()){
            return false;
        }
        if(front==-1){
            front=0;
        }
        else{
            if(front==0){
                front=size-1;
            }
            else
                front=(front-1)%size;
        }
        q[front]=x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        // Write your code here.
        if(isFull()){
            return false;
        }
        if(front==-1){
            front=1;
        }
        rear=(rear+1)%size;
        q[rear]=x;
        return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
        }
        int element=q[front];
        if(front==rear){
            front=-1;
            rear=-1;
        }
        front=(front+1)%size;
        return element;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
        }
        if(front==rear){
            front=-1;
            rear=-1;
        }
        int element=q[rear];
        rear=(rear-1)%size;
        return element;
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        // Write your code here.
        if(isEmpty()){
            return -1;
            }
        int element=q[front];
        return front;
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        // Write your code here.
        if(isFull()){
            return -1;
        }
        int element=q[rear];
        return element;
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        // Write your code here.
        if(front==-1){
            return true;
        }
        return false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        // Write your code here.
        if((rear+1)%size == front){
            return true;
        }
        return false;
    }
};
